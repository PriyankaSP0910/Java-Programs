package test;

class Person {

protected String name;

protected String address;

protected String phoneNumber;

protected String emailId;

public Person(String name, String address, String phoneNumber, String emailId) {

this.name = name;

this.address = address;

this.phoneNumber = phoneNumber;

this.emailId = emailId;

}

public void displayInformation() {

System.out.println("Name: " + name);

System.out.println("Address: " + address);

System.out.println("Phone Number: " + phoneNumber);

System.out.println("Email ID: " + emailId);

}

}

interface Staff {

void staff(String name, String address, String phoneNumber, String emailId, String designation);

}

class Staff_Op implements Staff {

private String designation;

public Staff_Op(String designation) {

this.designation = designation;

}

@Override

public void staff(String name, String address, String phoneNumber, String emailId, String designation) {

Person staff = new Person(name, address, phoneNumber, emailId);

System.out.println("Staff information updated successfully.");

System.out.println("Staff Information:");

staff.displayInformation();

System.out.println("Designation: " + this.designation);

System.out.println();

}

double calculateSalary() {

// Perform salary calculation based on designation, experience, etc.

// This is just a placeholder implementation

if (designation.equals("Manager")) {

return 5000.0;

} else if (designation.equals("Employee")) {

return 3000.0;

} else {

return 0.0;

}

}

}

//Student interface

interface Student {

void student(String name, String address, String phoneNumber, String emailId, String usn, String branch);

}

//Student implementation

class Student_Op implements Student {

private String usn;

private String branch;

public Student_Op(String usn, String branch) {

this.usn = usn;

this.branch = branch;

}

@Override

public void student(String name, String address, String phoneNumber, String emailId, String usn, String branch) {

Person student = new Person(name, address, phoneNumber, emailId);

System.out.println("Student information updated successfully.");

System.out.println("Student Information:");

student.displayInformation();

System.out.println("USN: " + this.usn);

System.out.println("Branch: " + this.branch);

System.out.println();

}

protected double calculateFees() {

// Perform fee calculation based on the branch, course, etc.

// This is just a placeholder implementation

if (branch.equals("Computer Science")) {

return 5000.0;

} else if (branch.equals("Electrical Engineering")) {

return 6000.0;

} else {

return 0.0;

}

}

}

// TestClass

class TestClass {

public static void main(String[] args) {

Staff_Op staffObj = new Staff_Op("Manager");

staffObj.staff("John Doe", "123 Main St", "1234567890", "johndoe@example.com", "Manager");

double salary = staffObj.calculateSalary();

System.out.println("Calculated Salary: $" + salary);

Student_Op studentObj = new Student_Op("USN123", "Computer Science");

studentObj.student("Jane Smith", "456 Elm St", "9876543210", "janesmith@example.com", "USN123", "Computer Science");

double fees = studentObj.calculateFees();

System.out.println("Calculated Fees: $" + fees);

}

}
